from source.audio_analysis import audio_analysis_tools
from source.audio_analysis.audio_analysis_tools import AudioAnalysisTools, FilterCriteria
from source.audio_analysis.audio_feature import AudioFeature
from source.playlists.playlist_tools import PlaylistTools
from typing import List
import json

audio_analysis_tools = AudioAnalysisTools()
playlist_tools = PlaylistTools()

library_file="/home/cordi/old_home_folder/cordi/Files/projects/SpotifyTools/data/libraries/wcs_large.json"

filter_criteria=[
    {
        'playlist_name': "Slow",
        "criteria": [
            FilterCriteria(audio_feature=AudioFeature.TEMPO, lower=70, upper=90),
        ],
    },
    {
        'playlist_name': "Slow Acoustic",
        "criteria": [
        FilterCriteria(audio_feature=AudioFeature.TEMPO, lower=70, upper=90),
        FilterCriteria(audio_feature=AudioFeature.ACOUSTICNESS, lower=0.5, upper=1)
        ],
    },
    {
        'playlist_name': "Instrumental",
        "criteria": [
        FilterCriteria(audio_feature=AudioFeature.INSTRUMENTALNESS, lower=0.5, upper=1)
        ],
    },
    {
        'playlist_name': "Fast High Energy",
        "criteria": [
        FilterCriteria(audio_feature=AudioFeature.TEMPO, lower=110, upper=130),
        FilterCriteria(audio_feature=AudioFeature.ENERGY, lower=0.5, upper=1)
        ],
    },
    {
        'playlist_name': "Happy",
        "criteria": [
        FilterCriteria(audio_feature=AudioFeature.VALENCE, lower=0.5, upper=1)
        ],
    },
    {
        'playlist_name': "Fast",
        "criteria": [
        FilterCriteria(audio_feature=AudioFeature.TEMPO, lower=110, upper=130)
        ],
    },
]



filter_criteria_2=[]
for bpm_lower, bpm_upper in ((75, 85), (85, 95), (95, 105), (105, 115), (115, 125)):
    filter_criteria_2.append({
        "playlist_name": f"My Own WCS {bpm_lower}-{bpm_upper} BPM",
        "criteria": [
            FilterCriteria(audio_feature=AudioFeature.TEMPO, lower=bpm_lower, upper=bpm_upper),
        ]
    })

filter_criteria_3 = [
    {
        'playlist_name': "90-110 BPM New",
        "criteria": [
        FilterCriteria(audio_feature=AudioFeature.TEMPO, lower=90, upper=110)
        ],
    }
]

filter_criteria_4 = [
    {
        'playlist_name': "All my WCS songs",
        "criteria": [
        ],
    }
]
def generate_description(criteria_list: List[FilterCriteria]):
    description = "Playlist autogenerated based on the following criteria: "
    first=True
    for criteria in criteria_list:
        if not first:
            description += ", "
        description += f"{criteria.audio_feature.name} between {criteria.lower} and {criteria.upper}"
        first=False
    return description

skip_analysis_download_for_missing_songs = False

library = None
if library_file:
    with open(library_file) as f:
        library=json.load(f)


#for entry in filter_criteria + filter_criteria_2 + filter_criteria_3:
for entry in filter_criteria_3:
    name = entry['playlist_name']
    criteria = entry['criteria']
    description = generate_description(criteria_list=criteria)
    if library:
        tracks = audio_analysis_tools.filter_specific_tracks(tracks=library, criteria_list=criteria, skip_if_missing=skip_analysis_download_for_missing_songs)
    else:
        tracks = audio_analysis_tools.filter_all_tracks(criteria)
    playlist_id = playlist_tools.create_or_clean_playlist(name=name)
    playlist_tools.add_tracks_to_playlist(playlist_id=playlist_id, tracks=tracks)
    playlist_tools.update_playlist_description(playlist_id=playlist_id, description=description)    
    print(f"Finished playlist {name}. It has {len(tracks)} tracks.")
